##################################################
# file: checkVatService_server.py
#
# skeleton generated by "ZSI.generate.wsdl2dispatch.ServiceModuleWriter"
#      C:\python25\scripts\wsdl2py.py -b checkVatService.wsdl
#
##################################################

from ZSI.schema import GED, GTD
from ZSI.TCcompound import ComplexType, Struct
from checkVatService_types import *
from ZSI.ServiceContainer import ServiceSOAPBinding

# Messages  
checkVatRequest = GED("urn:ec.europa.eu:taxud:vies:services:checkVat:types", "checkVat").pyclass

checkVatResponse = GED("urn:ec.europa.eu:taxud:vies:services:checkVat:types", "checkVatResponse").pyclass

checkVatApproxRequest = GED("urn:ec.europa.eu:taxud:vies:services:checkVat:types", "checkVatApprox").pyclass

checkVatApproxResponse = GED("urn:ec.europa.eu:taxud:vies:services:checkVat:types", "checkVatApproxResponse").pyclass


# Service Skeletons
class checkVatService(ServiceSOAPBinding):
    soapAction = {}
    root = {}

    def __init__(self, post='/taxation_customs/vies/services/checkVatService', **kw):
        ServiceSOAPBinding.__init__(self, post)

    def soap_checkVat(self, ps, **kw):
        request = ps.Parse(checkVatRequest.typecode)
        return request,checkVatResponse()

    soapAction[''] = 'soap_checkVat'
    root[(checkVatRequest.typecode.nspname,checkVatRequest.typecode.pname)] = 'soap_checkVat'

    def soap_checkVatApprox(self, ps, **kw):
        request = ps.Parse(checkVatApproxRequest.typecode)
        return request,checkVatApproxResponse()

    soapAction[''] = 'soap_checkVatApprox'
    root[(checkVatApproxRequest.typecode.nspname,checkVatApproxRequest.typecode.pname)] = 'soap_checkVatApprox'

