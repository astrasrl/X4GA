##################################################
# file: checkVatService_types.py
#
# schema types generated by "ZSI.generate.wsdl2python.WriteServiceModule"
#    C:\python25\scripts\wsdl2py.py -b checkVatService.wsdl
#
##################################################

import ZSI
import ZSI.TCcompound
from ZSI.schema import LocalElementDeclaration, ElementDeclaration, TypeDefinition, GTD, GED
from ZSI.generate.pyclass import pyclass_type

##############################
# targetNamespace
# urn:ec.europa.eu:taxud:vies:services:checkVat:types
##############################

class ns0:
    targetNamespace = "urn:ec.europa.eu:taxud:vies:services:checkVat:types"

    class companyTypeCode_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:ec.europa.eu:taxud:vies:services:checkVat:types"
        type = (schema, "companyTypeCode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class matchCode_Def(ZSI.TC.String, TypeDefinition):
        schema = "urn:ec.europa.eu:taxud:vies:services:checkVat:types"
        type = (schema, "matchCode")
        def __init__(self, pname, **kw):
            ZSI.TC.String.__init__(self, pname, pyclass=None, **kw)
            class Holder(str):
                typecode = self
            self.pyclass = Holder

    class checkVat_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "checkVat"
        schema = "urn:ec.europa.eu:taxud:vies:services:checkVat:types"
        def __init__(self, **kw):
            ns = ns0.checkVat_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"vatNumber"), aname="_vatNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'urn:ec.europa.eu:taxud:vies:services:checkVat:types', u'checkVat')
            kw["aname"] = "_checkVat"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._countryCode = None
                    self._vatNumber = None
                    return
            Holder.__name__ = "checkVat_Holder"
            self.pyclass = Holder

    class checkVatResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "checkVatResponse"
        schema = "urn:ec.europa.eu:taxud:vies:services:checkVat:types"
        def __init__(self, **kw):
            ns = ns0.checkVatResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"vatNumber"), aname="_vatNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"requestDate"), aname="_requestDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"valid"), aname="_valid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"name"), aname="_name", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"address"), aname="_address", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'urn:ec.europa.eu:taxud:vies:services:checkVat:types', u'checkVatResponse')
            kw["aname"] = "_checkVatResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._countryCode = None
                    self._vatNumber = None
                    self._requestDate = None
                    self._valid = None
                    self._name = None
                    self._address = None
                    return
            Holder.__name__ = "checkVatResponse_Holder"
            self.pyclass = Holder

    class checkVatApprox_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "checkVatApprox"
        schema = "urn:ec.europa.eu:taxud:vies:services:checkVat:types"
        def __init__(self, **kw):
            ns = ns0.checkVatApprox_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"vatNumber"), aname="_vatNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"traderName"), aname="_traderName", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:ec.europa.eu:taxud:vies:services:checkVat:types","companyTypeCode",lazy=False)(pname=(ns,"traderCompanyType"), aname="_traderCompanyType", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"traderStreet"), aname="_traderStreet", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"traderPostcode"), aname="_traderPostcode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"traderCity"), aname="_traderCity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"requesterCountryCode"), aname="_requesterCountryCode", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"requesterVatNumber"), aname="_requesterVatNumber", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'urn:ec.europa.eu:taxud:vies:services:checkVat:types', u'checkVatApprox')
            kw["aname"] = "_checkVatApprox"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._countryCode = None
                    self._vatNumber = None
                    self._traderName = None
                    self._traderCompanyType = None
                    self._traderStreet = None
                    self._traderPostcode = None
                    self._traderCity = None
                    self._requesterCountryCode = None
                    self._requesterVatNumber = None
                    return
            Holder.__name__ = "checkVatApprox_Holder"
            self.pyclass = Holder

    class checkVatApproxResponse_Dec(ZSI.TCcompound.ComplexType, ElementDeclaration):
        literal = "checkVatApproxResponse"
        schema = "urn:ec.europa.eu:taxud:vies:services:checkVat:types"
        def __init__(self, **kw):
            ns = ns0.checkVatApproxResponse_Dec.schema
            TClist = [ZSI.TC.String(pname=(ns,"countryCode"), aname="_countryCode", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"vatNumber"), aname="_vatNumber", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TCtimes.gDate(pname=(ns,"requestDate"), aname="_requestDate", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.Boolean(pname=(ns,"valid"), aname="_valid", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"traderName"), aname="_traderName", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), GTD("urn:ec.europa.eu:taxud:vies:services:checkVat:types","companyTypeCode",lazy=False)(pname=(ns,"traderCompanyType"), aname="_traderCompanyType", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"traderAddress"), aname="_traderAddress", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"traderStreet"), aname="_traderStreet", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"traderPostcode"), aname="_traderPostcode", minOccurs=0, maxOccurs=1, nillable=True, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"traderCity"), aname="_traderCity", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:ec.europa.eu:taxud:vies:services:checkVat:types","matchCode",lazy=False)(pname=(ns,"traderNameMatch"), aname="_traderNameMatch", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:ec.europa.eu:taxud:vies:services:checkVat:types","matchCode",lazy=False)(pname=(ns,"traderCompanyTypeMatch"), aname="_traderCompanyTypeMatch", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:ec.europa.eu:taxud:vies:services:checkVat:types","matchCode",lazy=False)(pname=(ns,"traderStreetMatch"), aname="_traderStreetMatch", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:ec.europa.eu:taxud:vies:services:checkVat:types","matchCode",lazy=False)(pname=(ns,"traderPostcodeMatch"), aname="_traderPostcodeMatch", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), GTD("urn:ec.europa.eu:taxud:vies:services:checkVat:types","matchCode",lazy=False)(pname=(ns,"traderCityMatch"), aname="_traderCityMatch", minOccurs=0, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded")), ZSI.TC.String(pname=(ns,"requestIdentifier"), aname="_requestIdentifier", minOccurs=1, maxOccurs=1, nillable=False, typed=False, encoded=kw.get("encoded"))]
            kw["pname"] = (u'urn:ec.europa.eu:taxud:vies:services:checkVat:types', u'checkVatApproxResponse')
            kw["aname"] = "_checkVatApproxResponse"
            self.attribute_typecode_dict = {}
            ZSI.TCcompound.ComplexType.__init__(self,None,TClist,inorder=0,**kw)
            class Holder:
                __metaclass__ = pyclass_type
                typecode = self
                def __init__(self):
                    # pyclass
                    self._countryCode = None
                    self._vatNumber = None
                    self._requestDate = None
                    self._valid = None
                    self._traderName = None
                    self._traderCompanyType = None
                    self._traderAddress = None
                    self._traderStreet = None
                    self._traderPostcode = None
                    self._traderCity = None
                    self._traderNameMatch = None
                    self._traderCompanyTypeMatch = None
                    self._traderStreetMatch = None
                    self._traderPostcodeMatch = None
                    self._traderCityMatch = None
                    self._requestIdentifier = None
                    return
            Holder.__name__ = "checkVatApproxResponse_Holder"
            self.pyclass = Holder

# end class ns0 (tns: urn:ec.europa.eu:taxud:vies:services:checkVat:types)
